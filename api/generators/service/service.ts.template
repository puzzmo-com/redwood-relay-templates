import { findManyCursorConnection } from "@devoxa/prisma-relay-cursor-connection"
import cuid from "cuid"
import { dnull } from "dnull"
import { hasRole } from "src/lib/auth"

import { db } from 'src/lib/db'

/** TODO: This needs to go in object identification, and ensure its all lowercase

import { delete${singularPascalName}, puzzle${singularPascalName} } from "../${pluralCamelName}/${pluralCamelName}"

[":${singularCamelName}", {
    type: "${singularPascalName}",
    get: ${singularCamelName},
    delete: delete${singularPascalName},
  }],

*/

export const ${singularCamelName} = (args) => {
  const query = args.id.length > 10 ? { id: args.id } : { slug: args.id }
  return db.${singularCamelName}.findUnique({ where: query })
}

export const ${pluralCamelName}Where = (outerArgs) => {
  const useWhere = outerArgs.where && typeof outerArgs.where === "object"
  const where = useWhere ? (outerArgs.where as any) : undefined

  const orderBy = { updatedAt: "asc" } as const
  const baseArgs = {
    where,
    orderBy,
  }

  return findManyCursorConnection(
    (args) => db.${singularCamelName}.findMany({ ...args, ...baseArgs }),
    () => db.${singularCamelName}.count({ where: baseArgs.where }),
    outerArgs
  )
}

export const create${singularPascalName} = async (args) => {
  const { input } = args
  try {
    return db.${singularCamelName}.create({
      data: {
        id: cuid() + ":${singularCamelName}",
        slug: cuid.slug(),
        ...input,
      },
    })
  } catch(err: any) {
    return { failed: true, message: "Failed to create ${singularPascalName}: " + err.message }
  }
}


export const update${singularPascalName} = (args) => {
  const { id, input } = args
  try {
    return db.${singularCamelName}.update({
      data: dnull(input),
      where: { id },
    })
  } catch(err: any) {
    return { failed: true, message: "Failed to update ${singularPascalName}: " + err.message }
  }
}

export const delete${singularPascalName} = (args) => {
  const isAdmin = hasRole({ roles: "admin" })
  if (!isAdmin) throw new Error("Only admins can delete")

  return db.${singularCamelName}.delete({ where: { id: args.id } })
}
<% if (relations.length) { %>

export const ${singularPascalName}: ${singularPascalName}Resolvers = {<% relations.forEach(relation => { %>
  ${relation}: (_args, { root }) => db.${singularCamelName}.findUnique({ where: { id: root.id } }).${relation}(),<% }) %>
}<% } %>
