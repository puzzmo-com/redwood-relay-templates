export const schema = gql`
  type ${singularPascalName} implements Node {
    id: ID!
    slug: String!

    ${query.replace("id: String!", "").replace("slug: String!", "")}
  }
<% if (enums.length > 0) {%>
<% enums.forEach((enumDef, idx)=> {%>  enum ${enums[idx].name} {<% enums[idx].values.forEach((enumDefValue, idk)=> { %>
    ${enums[idx].values[idk].name}<% }) %>
  }
<%}) %><% } %>
  type Query {
    # Can't use RW auth here because this function is used by node
    ${singularCamelName}(id: ID!): ${singularPascalName} @skipAuth
    ${pluralCamelName}Where(first: Int, last: Int, before: String, after: String, where: JSON): ${singularPascalName}Connection! @requireAuth(roles: ["admin"])
  }

  type ${singularPascalName}Edge {
    node: ${singularPascalName}!
    cursor: String!
  }

  type ${singularPascalName}Connection {
    edges: [${singularPascalName}Edge]
    pageInfo: PageInfo!
  }

  union Errorable${singularPascalName} = ${singularPascalName} | ErrorableResponse

  input Create${singularPascalName}Input {
    ${createInput}
  }

  input Update${singularPascalName}Input {
    ${updateInput}
  }<% if (crud) { %>

  type Mutation {
    create${singularPascalName}(input: Create${singularPascalName}Input!): Errorable${singularPascalName}! @requireAuth
    update${singularPascalName}(id: ID!, input: Update${singularPascalName}Input!): Errorable${singularPascalName}! @requireAuth
    delete${singularPascalName}(id: ID!): ${singularPascalName}! @skipAuth
  }<% } %>
`
